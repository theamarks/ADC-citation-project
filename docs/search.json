[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "\nSearching for Elusive Arctic Dataset Citations",
    "section": "",
    "text": "Run ADC DOIs through scythe & compare to known DataONE metrics citations. Known ADC citations have mixed origins including DataCite, previous scythe runs, and manual additions via the ADC UI."
  },
  {
    "objectID": "index.html#questions",
    "href": "index.html#questions",
    "title": "\nSearching for Elusive Arctic Dataset Citations",
    "section": "2 Questions",
    "text": "2 Questions\n\nDoes the addition of the xDD digital library to the Scythe package improve the quality and scope of citations in the ADC? Does increasing the number of sources we are searching result in more complete coverage (quality)?\n\nOverlap in citation among sources\nSpecies ratification curve inspired - start to get to a point where we can estimate the actual amount of citation out there. Dataset citations are rare enough the technique may not be applicable. Rarefaction.\n\n\nThe calculation of species richness for a given number of samples is based on the rarefaction curve. The rarefaction curve is a plot of the number of species against the number of samples. This curve is created by randomly re-sampling the pool of N samples several times and then plotting the average number of species found on each sample. Generally, it initially grows rapidly (as the most common species are found) and then slightly flattens (as the rarest species remain to be sampled). source\n\nWould this be sampling the entireity of ADC DOIs?\nDoes the prevalence of data citations differ among disciplines (enviro vs SS)?\n\nUse ADC dicipline classifications\nDataset citations are rare, N of classifications varies widely, need to control for sampling biases https://zenodo.org/record/4730857#.YoaQ2WDMKrM\n\n\n\n\nTotal number of citations is extremely useful. Ground truth analysis - for a small number of datasets manually search through literature for citations.\nDo usage metrics (downloads and views) correlate well with citation metrics?"
  },
  {
    "objectID": "index.html#methods-overview",
    "href": "index.html#methods-overview",
    "title": "\nSearching for Elusive Arctic Dataset Citations",
    "section": "3 Methods Overview",
    "text": "3 Methods Overview\n\nGather existing/known ADC dataset citations picked up by the automated DataONE metrics API\nGet a list of all ADC dataset DOIs\nRun all ADC dataset DOIs through scythe libraries\nReview HTTP errors and rerun\nCalculate citation source overlap\nCompare citations from scythe to DataONE metrics"
  },
  {
    "objectID": "index.html#r-setup",
    "href": "index.html#r-setup",
    "title": "\nSearching for Elusive Arctic Dataset Citations",
    "section": "4 R Setup",
    "text": "4 R Setup\n\n\nCode\n# set date here. Used throughout data collection, saving, and analysis. YYYY-MM-DD\n#date <- \"2022-07-14\"\ndate <- \"2022-11-03\"\n\n# vector of APIs used in analysis\nsource_list <- c(\"scopus\", \"springer\", \"plos\", \"xdd\")\n\n# load libraries\nsource(file.path(\"./R/load_pkgs.R\"))\n\n# create directories and file paths \nsource(file.path(\"./R/analysis_paths.R\"))"
  },
  {
    "objectID": "index.html#search-for-citations",
    "href": "index.html#search-for-citations",
    "title": "\nSearching for Elusive Arctic Dataset Citations",
    "section": "5 Search For Citations",
    "text": "5 Search For Citations\n\n5.1 Current known ADC citations\nUse GET API request body in DataOne Metrics Service production endpoint: https://logproc-stage-ucsb-1.test.dataone.org/metrics documentation: https://app.swaggerhub.com/apis/nenuji/data-metrics/1.0.0.3\n\n\nCode\n{\n  \"metricsPage\":{\n    \"total\":0,\n    \"start\":0,\n    \"count\":0\n  },\n  \"metrics\":[\"citations\"],\n  \"filterBy\":[{\n    \"filterType\":\"repository\",\n    \"values\":[\"urn:node:ARCTIC\"],\n    \"interpretAs\":\"list\"\n  },\n  {\n    \"filterType\":\"month\",\n    \"values\":[\"01/01/2012\",\n              \"05/24/2022\"],\n    \"interpretAs\":\"range\"\n  }],\n  \"groupBy\":[\"month\"]\n}\n\n\nExample request:\n\n\nCode\nhttps://logproc-stage-ucsb-1.test.dataone.org/metrics?metricsRequest={%22metricsPage%22:{%22total%22:0,%22start%22:0,%22count%22:0},%22metrics%22:[%22citations%22],%22filterBy%22:[{%22filterType%22:%22repository%22,%22values%22:[%22urn:node:ARCTIC%22],%22interpretAs%22:%22list%22},{%22filterType%22:%22month%22,%22values%22:[%2201/01/2012%22,%2205/24/2022%22],%22interpretAs%22:%22range%22}],%22groupBy%22:[%22month%22]\n}\n\n\nFunction to retrieve dataset citations generated by DataOne metrics service (from Jeanette Clark):\n\n\nCode\nmetrics_citations <- function(from = as.POSIXct(\"2010-01-01\"), to = as.POSIXct(Sys.Date())){\n\n    from <- as.Date(from); to <- as.Date(to)\n    from_q <- paste(stringr::str_pad(lubridate::month(from), 2, side = \"left\", pad = \"0\"),\n                    stringr::str_pad(lubridate::day(from), 2, side = \"left\", pad = \"0\"),\n                    stringr::str_pad(lubridate::year(from), 2, side = \"left\", pad = \"0\"),\n                    sep = \"/\")\n\n    to_q <- paste(stringr::str_pad(lubridate::month(to), 2, side = \"left\", pad = \"0\"),\n                  stringr::str_pad(lubridate::day(to), 2, side = \"left\", pad = \"0\"),\n                  stringr::str_pad(lubridate::year(to), 2, side = \"left\", pad = \"0\"),\n                  sep = \"/\")\n\n    d <- jsonlite::fromJSON(paste0('https://logproc-stage-ucsb-1.test.dataone.org/metrics?q={%22metricsPage%22:{%22total%22:0,%22start%22:0,%22count%22:0},%22metrics%22:[%22citations%22],%22filterBy%22:[{%22filterType%22:%22repository%22,%22values%22:[%22urn:node:ARCTIC%22],%22interpretAs%22:%22list%22},{%22filterType%22:%22month%22,%22values%22:[%22', from_q,'%22,%22', to_q, '%22],%22interpretAs%22:%22range%22}],%22groupBy%22:[%22month%22]}'))\n\n    output_json <- d$resultDetails$citations # pulls citation info\n    output_df <- as.data.frame(do.call(rbind, output_json), row.names = FALSE) # binds nested cit info into dataframe\n   # output_clean <- rownames_to_column(output_df, var = \"citation_id\") # converts row names to column\n    return(output_df)\n}\n\n\n\n\nCode\n# Run ADC API Get call, unnest target_id results to individual columns\ndataone_cit <- metrics_citations(to = as.POSIXct(date)) # use analysis date to constrain search\n\ndataone_cit <- tidyr::unnest(dataone_cit,\n                          cols = c(target_id, source_id, source_url,\n                                   link_publication_date, origin, title,\n                                   publisher, journal, volume, page, year_of_publishing))\n\nwrite_csv(dataone_cit, file.path(output_directory,\n                                 paste0(\"dataone_metrics_cit_\", date,\".csv\")))\n\n\n\n\n5.2 Query SOLR - all ADC DOIs\nDataOne metrics API can only provide data package DOIs with citations, and can not provide a comprehensive list of all data package DOIs contained within the ADC. To search through all the repository metadata we query the DataONE search index (Apache SOLR search engine). SOLR is the same underlying mechanism that DataONE uses in the online tool and can create complex logical query conditions.\n\n\n\n\n\n\nTip\n\n\n\nCall dataone::getQueryEngineDescription(cn, \"solr\") to return a complete list of searchable SOLR values\n\n\n\n\nCode\n# set coordinating node\ncn <- dataone::CNode(\"PROD\")\n\n# point to specific member node\nmn <- dataone::getMNode(cn, \"urn:node:ARCTIC\")\n\n# set up Solr query parameters\nqueryParamList <- list(q=\"id:doi*\", \n                       fl=\"id,title,dateUploaded,datasource\",\n                       start =\"0\",\n                       rows = \"100000\") # set number to definitely exceed actual number\n# use `q = \"identifier:doi* AND (*:* NOT obsoletedBy:*)\"` to only include current versions of data packages \n# DataOne aggregates citations across dataset versions\n\n# send query to Solr, return results as dataframe\nsolr_adc_result <- dataone::query(mn, solrQuery=queryParamList, as=\"data.frame\", parse=FALSE)\n\nwrite.csv(solr_adc_result, file.path(output_directory, \n                                     paste0(\"solr_adc_\", date, \".csv\")))\n\n\nSOLR query does not yet include date search term to align with date object. Using date to save and read in .csv\n\n\n5.3 Run DOIs through scythe\n\n\nCode\n# read in saved SOLR results\nsolr_adc_result_csv <- read_csv(file.path(output_directory, \n                                          paste0(\"solr_adc_\", date, \".csv\")))\n# create vector of all ADC DOIs from solr query `result`\nadc_all_dois <- c(solr_adc_result_csv$id)\n\n\nAPIs can have request rate limits. These specific rates are often found in the API documentation or the API response headers. If request rate limits are exceeded, API queries will fail.\n\n\nCode\n# Scopus request Limits\nkey_scopus <- scythe::scythe_get_key(\"scopus\")\nurl <- paste0(\"https://api.elsevier.com/content/search/scopus?query=ALL:\",\n  \"10.18739/A2M32N95V\",\n  paste(\"&APIKey=\", key_scopus, sep = \"\"))\n\ncurlGetHeaders(url)\n# [15:17] shows \"X-RateLimit-Limit:\", \"X-RateLimit-Remaining:\", and \"X-RateLimit-Reset:\" (Unix epoch is the number of seconds that have elapsed since January 1, 1970 at midnight UTC time minus the leap seconds)\n\n# Springer request Limits\n# 300 calls/min and 5000/day\n# not found in response header, received email from springer that I was exceeding their rates above\n\n#key_spring <- scythe::scythe_get_key(\"springer\")\n#url_spring <- paste0(\"http://api.springernature.com/meta/v2/json?q=doi:10.1007/BF00627098&api_key=\", key_spring)\n#curlGetHeaders(url_spring)\n\n\nRun each library search in parallel in separate background jobs to keep console available to work with. By default job::job() imports the global environment into the background job.\n\n\n\n\n\n\nNote\n\n\n\nscythe::scythe_set_key() is a wrapper for the key_ring package. An interactive password prompt is required to access the API keys stored in key_ring. This does not work within a background job environment; your keyring needs to be temporarily unlocked with keyring::keyring_unlock(\"scythe\", \"your password\") replace password in the next code chunk with your actual keyring password.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nBe careful not to save, commit, or push your personal keyring password.\n\n\n\n\nCode\n# Run each source/library search in a separate background job. Running a for loop will return incomplete results if API query fails, which is better than loosing all progress because of a single error in a single vector call.  \n\nkey <- \"password\"\n\n# Set up empty results data.frames\ncitations_scopus <- data.frame()\ncitations_springer <- data.frame()\ncitations_plos <- data.frame()\ncitations_xdd <- data.frame()\n\n\n######### Scopus\njob::job({\n  for (i in seq_along(adc_all_dois)) {\n    # access API keys within background job environment\n    keyring::keyring_unlock(\"scythe\", key)\n    # suppress errors and continue loop iteration\n    result <- tryCatch(citation <- scythe::citation_search(adc_all_dois[i], \"scopus\"),\n                       error = function(err) {\n                         data.frame(\"article_id\" = NA,\n                                    \"article_title\" = NA,\n                                    \"dataset_id\" = adc_all_dois[i],\n                                    \"source\" = paste0(\"scopus \", as.character(err)))\n                         }\n                       )\n    citations_scopus <- rbind(citations_scopus, result)\n    write.csv(citations_scopus, path_scopus, row.names = F)\n  }\n}, title = paste0(\"scopus citation search \", Sys.time()))\n\n\n######### PLOS\njob::job({\n  for (i in seq_along(adc_all_dois)) {\n    # access API keys within background job environment\n    keyring::keyring_unlock(\"scythe\", key)\n    # suppress errors and continue loop iteration\n    result <- tryCatch(citation <- scythe::citation_search(adc_all_dois[i], \"plos\"),\n                       error = function(err) {\n                         data.frame(\"article_id\" = NA,\n                                    \"article_title\" = NA,\n                                    \"dataset_id\" = adc_all_dois[i],\n                                    \"source\" = paste0(\"plos\", as.character(err)))\n                         }\n                       )\n    citations_plos <- rbind(citations_plos, result)\n    write.csv(citations_plos, path_plos, row.names = F)\n    }\n}, title = paste0(\"plos citation search \", Sys.time()))\n\n\n########## XDD\njob::job({\n  for (i in seq_along(adc_all_dois)) {\n    # access API keys within background job environment\n    keyring::keyring_unlock(\"scythe\", key)\n    # suppress errors and continue loop iteration\n    result <- tryCatch(citation <- scythe::citation_search(adc_all_dois[i], \"xdd\"),\n                       error = function(err) {\n                         data.frame(\"article_id\" = NA,\n                                    \"article_title\" = NA,\n                                    \"dataset_id\" = adc_all_dois[i],\n                                    \"source\" = paste0(\"xdd\", as.character(err)))\n                         }\n                       )\n    citations_xdd <- rbind(citations_xdd, result)\n    write.csv(citations_xdd, path_xdd, row.names = F)\n    }\n}, title = paste0(\"xdd citation search \", Sys.time()))\n\n\n########## Springer\n# divide ADC corpus into chunks less than Springer's 5,000/day request limit\nspringer_limit <- 4995\nnum <- seq_along(adc_all_dois)\nchunk_list <- split(adc_all_dois, ceiling(num/springer_limit))\n\n\njob::job({\n  for(chunk in seq_along(chunk_list)){\n    # pause api query for > 24hrs between chunk runs\n    if(chunk != 1){Sys.sleep(87000)}\n    for (i in seq_along(chunk_list[[chunk]])){ \n      # access API keys within background job environment\n      keyring::keyring_unlock(\"scythe\", key)\n      # suppress errors and continue loop iteration\n      result <- tryCatch(citation <- scythe::citation_search(chunk_list[[chunk]][i], \"springer\"),\n                         error = function(err) {\n                           data.frame(\"article_id\" = NA,\n                                      \"article_title\" = NA,\n                                      \"dataset_id\" = chunk_list[[chunk]][i],\n                                      \"source\" = paste0(\"springer \", as.character(err)))\n                         }\n      )\n      test <- rbind(test, result)\n      write.csv(citations_springer, path_springer, row.names = F)\n    }\n  }\n}, title = paste0(\"springer citation search\", Sys.time())\n)\n\n\nSpringer’s API query limits affected how we ran our search. We decided to break the list of ADC DOIs into < 5,000 DOI chunks and run each chunk through the API with 24hrs in between the last query and starting the next DOI chunk. We could have changed the base scythe function citation_search_springer() to slow down to accommodate both request limits, but this would substantially slow down the function and make smaller DOIs queries slow and cumbersome.\n\n\nCode\n######### Springer\n\n# divide ADC corpus into chunks less than Springer's 5,000/day request limit\nspringer_limit <- 4995\nlength(adc_all_dois) / springer_limit\nchunk_1 <- adc_all_dois[1:springer_limit]\nchunk_2 <- adc_all_dois[(springer_limit+1):(springer_limit*2)]\nchunk_3 <- adc_all_dois[((springer_limit*2)+1):length(adc_all_dois)]\n\n# change \"chunk_x\" object to search next chunk of DOIs. Must wait 24 hrs from last request. \ndoi_chunk = chunk_3\n\njob::job({\n  for (i in seq_along(doi_chunk)){ \n    # access API keys within background job environment\n    keyring::keyring_unlock(\"scythe\", key)\n    # suppress errors and continue loop iteration\n    result <- tryCatch(citation <- scythe::citation_search(doi_chunk[i], \"springer\"),\n                       error = function(err) {\n                         data.frame(\"article_id\" = NA,\n                                    \"article_title\" = NA,\n                                    \"dataset_id\" = doi_chunk[i],\n                                    \"source\" = paste0(\"springer \", as.character(err)))\n                         }\n                       )\n    citations_springer <- rbind(citations_springer, result)\n    write.csv(citations_springer, path_springer, row.names = F)\n    }\n}, title = paste0(\"springer citation search\", Sys.time())\n)\n\n\n\n\n5.4 Dealing with errors\nThe tryCatch() functions in the above search for loops records errors produced from any API request or scythe function. The corresponding DOIs are extracted and rerun through scythe a second time. When running the DOIs with errors through Scopus we discovered two bugs in the scythe code. The first bug was fixed here. The second bug was a query return that did not have a DOI (conference proceedings).\n\n\nCode\n# Extract DOIs that error during scythe queries\n\n# read in raw results .csv into a list of dataframes\nmk_result_list <- function(asource){\n  path <- eval(parse(text = paste0(\"path_\", asource)))\n  if(file.exists(path)){\n    assign(paste0(\"cits_\",asource), read_csv(file.path(path)))\n  }\n}\nresults_list <- lapply(source_list, FUN = mk_result_list)\n# assign source names to list elements\nnames(results_list) <- source_list\n\n# pull dataframe rows that had API request errors\ndid_this_error <- function(adf){\n  error_index <- is.na(adf$article_id)\n  adf[error_index, \"dataset_id\"]\n}\nerror_list <- lapply(results_list, FUN = did_this_error)\n\n# run error DOIs back through scythe\nquery_errors <- function(adf, asource){\n  if(nrow(adf) > 0){\n    keyring::keyring_unlock(\"scythe\", key)\n    scythe::citation_search(adf$dataset_id, asource)\n  } \n}  \n                                 \nerror_query_results <- sapply(error_list, FUN = query_errors, source_list)\n\n\n\n\n\n\n\n\nNote\n\n\n\nRunning a second round of API queries using error DOIs is semi-automated above. Future script users will likely need to adjust the above code chunk to combine 1st and 2nd run results for analysis.\n\n\n\n\nCode\n# This code was used during the '2022-07-08' scythe run. \n## Scopus\ncitations_error_scopus <- data.frame()\njob::job({\n  for (i in seq_along(doi_error_scopus)) {\n    # access API keys within background job environment\n    keyring::keyring_unlock(\"scythe\", key)\n    # suppress errors and continue loop iteration\n    result <- tryCatch(citation <- scythe::citation_search(doi_error_scopus[i], \"scopus\"),\n                       error = function(err) {\n                         data.frame(\"article_id\" = NA,\n                                    \"article_title\" = NA,\n                                    \"dataset_id\" = doi_error_scopus[i],\n                                    \"source\" = paste0(\"scopus \", as.character(err)))\n                         }\n                       )\n    citations_error_scopus <- rbind(citations_error_scopus, result)\n  }\n}, title = paste0(\"scopus error citation search \", Sys.time()))\n\n# save search results from errored DOI\nwrite.csv(citations_error_scopus,\n          file.path(output_directory, paste0(\"scythe_\", date, \"_scopus_error.csv\")),\n          row.names = F)\n# 2022-07-14 scopus errors were incorporated into cits_scopus at some point. Not reflected in this code script.\n\n######### PLOS\ncitations_error_plos <- data.frame()\njob::job({\n  for (i in seq_along(doi_error_plos)) {\n    # access API keys within background job environment\n    keyring::keyring_unlock(\"scythe\", key)\n    # suppress errors and continue loop iteration\n    result <- tryCatch(citation <- scythe::citation_search(doi_error_plos[i], \"plos\"),\n                       error = function(err) {\n                         data.frame(\"article_id\" = NA,\n                                    \"article_title\" = NA,\n                                    \"dataset_id\" = doi_error_plos[i],\n                                    \"source\" = paste0(\"plos\", as.character(err)))\n                         }\n                       )\n    citations_error_plos <- rbind(citations_error_plos, result)\n    }\n}, title = paste0(\"plos error citation search \", Sys.time()))\n# empty dataframe return means no citations found and no HTTP errors"
  },
  {
    "objectID": "index.html#analysis-results",
    "href": "index.html#analysis-results",
    "title": "\nSearching for Elusive Arctic Dataset Citations",
    "section": "6 Analysis / Results",
    "text": "6 Analysis / Results\n\n6.1 Does addition of xDD improve quality & scope of ADC dataset citations?\nDoes increasing the number of sources we are searching result in more complete coverage/quality?\n\n\nCode\n# read in saved scythe results for all sources `cits_source` objects created\n# reduces dependency on global environment objects - can pick up analysis here instead of rerunning scythe\n\nfor(i in source_list){\n    path <- eval(parse(text = paste0(\"path_\", i)))\n    if(file.exists(path)){\n      assign(paste0(\"cits_\",i), read_csv(file.path(path)))\n    } else{print(paste0(i, \" saved scythe results do not exsist in output directory\"))\n      }\n}\n\n# read in saved combined results if already exist, create and save if not\nif(file.exists(path_all)) {\n  scythe_cit <- read_csv(path_all)\n} else{\n  scythe_cit <- rbind(cits_scopus, \n                      cits_springer,\n                      cits_plos,\n                      cits_xdd) %>%\n    filter(!is.na(article_id)) # remove NA/error observations\n           #grepl(dataset_id, pattern = \"^10.18739.*\")) # remove datasets not housed on the \n  write_csv(scythe_cit, path_all)\n}\n\n# \n\n\n\n\nCode\n# create mini dataframe to populate total citations in summary table\nscythe_total <- tibble(\"source\" = \"Total\",\n                       \"num_cit\" = length(scythe_cit$dataset_id),\n                       \"num_datasets\" = length(unique(scythe_cit$dataset_id)))\n  \n# summary table + cheater total row\nscythe_sum <- scythe_cit %>% \n  group_by(source) %>% \n  summarise(\"num_cit\" = length(source),\n            \"num_datasets\" = length(unique(dataset_id))) %>% \n  rbind(scythe_total)\n\nscythe_sum$source <- c(\"PLOS\", \"Scopus\", \"Springer\", \"xDD\", \"Total\")\n\nknitr::kable(scythe_sum, \n             col.names = c(\"Source\", \"Number of Citations\", \"Number of Datasets\"))\n\n\n\n\nTable 1: Raw Results from Scythe Search of ADC DOIs\n\n\nSource\nNumber of Citations\nNumber of Datasets\n\n\n\n\nPLOS\n40\n36\n\n\nScopus\n705\n368\n\n\nSpringer\n191\n93\n\n\nxDD\n327\n193\n\n\nTotal\n1263\n500\n\n\n\n\n\n\n\n6.1.1 Do citation sources overlap in coverage?\nWe evaluated the redundancy in dataset citations found among sources by matching citations between source search results. A citation is defined by the unique combination of article_id and dataset_id. Percent overlap is the total number of citations found in a source also found in a second source, divided by the total number of citation found within the source.\n\n\nCode\n# summarize the sources that each citation is found in for table\noverlap <- scythe_cit %>% \n  group_by(dataset_id, article_id) %>% \n  summarize(source_combination = paste(source, collapse = \"&\")) %>% \n  group_by(source_combination) %>% \n  summarize(n = n())\n\n# Create euler diagram of overlap\n# Color blind friendly color pallet\n#show_col(viridis(30, option = \"C\"))\noverlap_color <- c(\"#AB2494FF\", \"#DE6065FF\", \"#FCA338FF\", \"#F0F921FF\")\novrlp_vec <- setNames(overlap$n, as.character(overlap$source_combination))\nfit <- euler(ovrlp_vec)\nplot(fit, \n     quantities = TRUE,\n     fills = list(fill = overlap_color),\n     labels = c(\"PLOS\", \"Scopus\", \"Springer\", \"xDD\"))\n\n\n\n\n\nCitation Source Overlap: Number of citations found in multiple sources and number of citations found uniquely in only one source.\n\n\n\n\n\n\n\n\nTable 2: Percent overlap between Scythe sources\n\n\n\n\n\n\n\n\n\n\nSource\nTotal Citations\n% in PLOS\n% in Scopus\n% in Springer\n% in xDD\n\n\n\n\nPLOS\n40\n100.0\n30.0\n0.0\n0.0\n\n\nScopus\n705\n1.7\n100.0\n10.3\n16.7\n\n\nSpringer\n191\n0.0\n38.2\n100.0\n0.5\n\n\nxDD\n327\n0.0\n36.1\n0.3\n100.0\n\n\n\n\n\n\nScopus found 502 unique citations not found in any other digital libraries. Springer found 117, PLOS 28, and xDD 208 unique citations respectfully. The total number of unique citations returned by scythe is 1059.\n\n\n\n6.2 How many citations found by scythe are already known to DataOne Metrics Service?\ndo_cit_src_07 came from Rushiraj. do_cit_src_07 has the record of how citations entered the DataOne Metrics Service: Crossref, Metrics Service Ingest, and ORCID. Metrics Service Ingest is previous scythe runs. I cross referenced the scythe citation results with both DataOne metrics citation lists and look at the distribution of citation sources.\n\n\nCode\ndo_cit_src_07 <- readr::read_csv(file.path(data_dir, \"dataone_cits_report_2022_07_25.csv\"))\n\n# source_id = 'Unique identifier to the source dataset / document / article that cited the target dataset '\n# target_id = 'Unique identifier to the target DATAONE dataset. This is the dataset that was cited.'\n\n# clean up dataone citation reporter csv. Remove extra ' from character strings\ndo_cit_src_07 <- as.data.frame(lapply(do_cit_src_07, gsub, pattern = \"*'*\", replacement = \"\"))\n\ndo_cit_src_07 %<>%\n  rename(\"article_id\" = source_id, # rename dataone metrics citations columns to match scythe results\n         \"dataset_id\" = target_id) %>% \n  mutate(reporter = sub(\"^http.*\",\"ORCiD\", do_cit_src_07$reporter))\n\ndo_cit_source_sum <- do_cit_src_07 %>% \n  group_by(reporter) %>% \n  summarise(num_cit = n()) \n\ndo_cit_source_fig <- do_cit_source_sum %>% \n  ggplot(aes(reporter, num_cit)) +\n  geom_col() +\n  coord_flip() +\n  theme_minimal() +\n  theme(panel.grid.major.y = element_blank(),\n        axis.text.x=element_blank()) +\n  scale_y_continuous(limits = c(NA, 1300)) +\n  geom_text(aes(label = num_cit), hjust = -0.5) +\n  labs(x = \"\",\n       y = \"Number of Citations\",\n       caption = \"Total citations count: 2035\")\n\ndo_cit_source_fig\n\n\n\n\n\nFigure 1: Dataset Citation Reporting Sources From the DataOne Arctic Data Center Metrics Service\n\n\n\n\n\n\nCode\nscythe_cit_new <- anti_join(unique_citations, do_cit_src_07, by = c(\"article_id\", \"dataset_id\")) %>% \n  na.omit()\n# have 642 new scythe citations not found in dataone metrics\n\n# Citations in dataone metrics that also show up in latest scythe search `unique_citations`\n# These are the dataone metrics and scythe overlap citaitons \nscythe_in_dataone <- semi_join(do_cit_src_07, unique_citations, by = c(\"article_id\", \"dataset_id\"))\n\n\nscythe_in_do_sum <- scythe_in_dataone %>% \n  group_by(reporter) %>% \n  summarise(num_cit = n())\n\nknitr::kable(scythe_in_do_sum, \n             col.names = c(\"Source\", \"Number of Citations\"))\n\n\n\n?(caption)\n\n\n\nscythe found x new citations not currently in the DataOne Metrics Service. However, Table x and y indicate that citaitons found by previous scythe runs (Metrics Service Injest) are not being found by the current scythe run. Why are they missing? Do results from DataCite query overwrite previous Metrics Service Ingest observations? MIs scythe the only source for Metrics Service Injest?\nThis could be a figure - proportion columns\n\n\n\nQuery CrossRef to see if scythe results were reported\n\nDoes the prevalence of data citations differ among disciplines (enviro vs SS)?\n\nUse ADC discipline classifications\nDataset citations are rare, N of classifications varies widely, need to control for sampling biases https://zenodo.org/record/4730857#.YoaQ2WDMKrM\n\nTotal number of citations is extremely useful. Ground truth analysis - for a small number of datasets manually search through literature for citations.\nDo usage metrics (downloads and views) correlate well with citation metrics?"
  },
  {
    "objectID": "index.html#next-steps",
    "href": "index.html#next-steps",
    "title": "\nSearching for Elusive Arctic Dataset Citations",
    "section": "7 Next Steps",
    "text": "7 Next Steps\n-   Analysis by discipline\nRoot of ADC discipline semantics annotations Classes/ID is where to look for query specifics. “Here’s an example SOLR query that looks for two of those disciplines:\nhttps://cn.dataone.org/cn/v2/query/solr/?q=sem_annotation:*ADCAD_00077+OR+sem_annotation:*ADCAD_00005&fl=identifier,formatId,sem_annotation\n\nMatt Need to list every single SS ID in query list, not set up to query umbrella SS ID just yet\n\n\n\nCode\n# Run second Solr query to pull semantic annotations for 2022_08_10 DOIs\n\n# set coordinationg node\ncn <- dataone::CNode(\"PROD\")\n\n# point to specific member node\nmn <- dataone::getMNode(cn, \"urn:node:ARCTIC\")\n\n# set up Solr query parameters\nqueryParamList <- list(q = \"id:doi* AND (*:* NOT obsoletedBy:*)\",\n                       fl = \"id,title,dateUploaded,datasource,sem_annotation\",\n                       start =\"0\",\n                       rows = \"100000\")\n\n# send query to Solr, return results as dataframe. parse = T returns list column, F returns chr value\nsolr_adc_sem <- dataone::query(mn, solrQuery=queryParamList, as=\"data.frame\", parse=T)\n\n# POSSIBLE BREAK POINT - read in url\n# read in csv with coded discipline ontology\nadc_disc <- read.csv(\"https://raw.githubusercontent.com/NCEAS/adc-disciplines/main/adc-disciplines.csv\") %>% \n  # use ontology id to build id url - add required amount of 0s to create 5 digit suffix\n    mutate(an_uri = paste0(\"https://purl.dataone.org/odo/ADCAD_\", \n                           stringr::str_pad(id, 5, \"left\", pad = \"0\")))\n\nsolr_adc_sem$category <- purrr::map(solr_adc_sem$sem_annotation, function(x){\n    t <- grep(\"*ADCAD*\", x, value = TRUE)\n    cats <- c()\n    for (i in 1:length(t)){\n        z <- which(adc_disc$an_uri == t[i])\n        cats[i] <- adc_disc$discipline[z]\n        \n    }\n    return(cats)\n})\n\n# extract discipline categories from single column to populate new columns\nadc_disc_wide <- solr_adc_sem %>% \n    unnest_wider(category, names_sep =\"_\") %>% \n    select(-sem_annotation)\n\n\n\n\nCode\n# key from old discipline categories to new ADCAD ontology - approved matches\nthemes <- read_csv(file.path(\"data/old_themes_ADCAD_key.csv\"))\n\n# read in csv with previous classifications\nold_cat <- read.csv(file.path(\"data/dataset_categorization.csv\"))\n\n# replace old theme categories with new ADCAD ontology terms.\n# only replacing terms that don't need review (themes df), leave the rest. \nnew_cat <- old_cat %>% \n  select(url, id)\n\nfor(i in colnames(old_cat[7:11])) {\n  # sequence through column names\n  new_cat[[i]] <- purrr::map(old_cat[[i]], function(old_theme) {\n    if (old_theme %in% themes$old) {\n      # replace if old theme is listed\n      new_theme <-\n        themes$ADCAD[which(themes$old == old_theme)] # get corresponding new disc\n      return(new_theme) # use disc ontology term to populate column\n    } else{\n      if (old_theme == \"\") {\n        old_theme = NA\n      }\n      return(old_theme)\n    } # keep old_theme if review is needed\n  })\n}\n\n# unnest list columns\nnew_cat %<>% \n  unnest(cols = c(\"theme1\", \"theme2\", \"theme3\", \"theme4\", \"theme5\"))\n\n# Add re-categorization to solr query results (adc_disc_wide)\nadc_disc_new <- adc_disc_wide %>% \n  left_join(new_cat, by = \"id\") %>% \n  mutate(url = url)\n\n# check if there is any overlapping entries between theme1 & category_1 etc.\n# overlap_cat1 <- adc_disc_new %>%\n#   filter(!is.na(theme1) & !is.na(category_1))\n# \n# overlap_cat2 <- adc_disc_new %>%\n#   filter(!is.na(theme2) & !is.na(category_2))\n# \n# overlap_cat3 <- adc_disc_new %>%\n#   filter(!is.na(theme3) & !is.na(category_3))\n# \n# overlap_cat4 <- adc_disc_new %>%\n#   filter(!is.na(theme4) & !is.na(category_4))\n# \n# overlap_cat5 <- adc_disc_new %>%\n#   filter(!is.na(theme5) & !is.na(category_5))\n# ^^ No overlap between two datasets\n\n# Combine discipline category columns + DOI\nadc_disc_ADCAD <- adc_disc_new %>% \n  transmute(url = url,\n            id = id,\n            title = title,\n            disc_cat_1 = ifelse(!is.na(category_1), category_1, theme1),\n            disc_cat_2 = ifelse(!is.na(category_2), category_2, theme2),\n            disc_cat_3 = ifelse(!is.na(category_3), category_3, theme3),\n            disc_cat_4 = ifelse(!is.na(category_4), category_4, theme4),\n            disc_cat_5 = ifelse(!is.na(category_5), category_5, theme5)\n  )\n# Save results\n# write.csv(adc_disc_ADCAD, \"./output/ADC_ADCAD_disciplines.csv\", row.names = F)"
  }
]